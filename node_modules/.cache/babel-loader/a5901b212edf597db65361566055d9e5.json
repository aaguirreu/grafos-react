{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesn\\\\OneDrive - utem.cl\\\\Escritorio\\\\Universidad\\\\6to Semestre\\\\Graphs\\\\grafos-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { createRef, useState } from \"react\";\nimport functions from './functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\nvar Aristas = [];\nvar Vertices = [];\nvar tool = \"nodes\";\nvar selected;\nvar selectedAux;\nvar selectedNode;\nvar selectedEdge;\nvar color = randomColor();\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0'); //return `#${red}${green}${blue}`;\n\n  const colores = ['white', '#FF93EB', '#1C80B5', '#1C34B5', '#511CB5', '#9D1CB5', '#B51C80', '#B51C33'];\n  return colores[Math.floor(Math.random() * colores.length)];\n}\n\nconst crearNode = document.querySelector('button[name=nodes]');\nconst crearEdge = document.querySelector('button[name=edges-one]');\nconst crearEdgeDoble = document.querySelector('button[name=edges-doble]');\nconst closebtn = document.querySelector('button[name=closebtn]');\nconst sidebar = document.querySelector('.sidebar_left');\nclosebtn.addEventListener(\"click\", () => {\n  closebtn.setAttribute(\"class\", \"closebtn on\");\n  console.log(sidebar.className);\n\n  if (sidebar.className === \"sidebar_left\") {\n    sidebar.setAttribute(\"class\", \"sidebar_left_closed\");\n  } else {\n    closebtn.setAttribute(\"class\", \"closebtn\");\n    sidebar.setAttribute(\"class\", \"sidebar_left\");\n  }\n});\ncrearNode.addEventListener(\"click\", () => {\n  document.querySelector(\".edges-one\").setAttribute(\"class\", \"edges-one\");\n  document.querySelector(\".edges-doble\").setAttribute(\"class\", \"edges-doble\");\n  crearNode.setAttribute(\"class\", \"nodes on\");\n  console.log(\"Tool: nodes\");\n  tool = \"nodes\"; //changeCursor()\n});\ncrearEdge.addEventListener(\"click\", () => {\n  //document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n  document.querySelector(\".nodes\").setAttribute(\"class\", \"nodes\");\n  document.querySelector(\".edges-doble\").setAttribute(\"class\", \"edges-doble\");\n  crearEdge.setAttribute(\"class\", \"edges-one on\");\n  console.log(\"Tool: edges-one\");\n  tool = \"edges-one\"; //changeCursor()\n});\ncrearEdgeDoble.addEventListener(\"click\", e => {\n  //document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n  document.querySelector(\".nodes\").setAttribute(\"class\", \"nodes\");\n  document.querySelector(\".edges-one\").setAttribute(\"class\", \"edges-one\");\n  crearEdgeDoble.setAttribute(\"class\", \"edges-doble on\");\n  console.log(\"Tool: edges-doble\");\n  tool = \"edges-doble\"; //changeCursor()\n});\n\ndocument.getElementById(\"matriz\").onclick = function () {\n  document.getElementById(\"cantidadv\").innerHTML = 'Cantidad de vertices: ' + functions.CantidadV();\n  document.getElementById(\"cantidada\").innerHTML = 'Cantidad de Aristas: ' + functions.CantidadA();\n\n  if (functions.EsDirigido() == false) {\n    document.getElementById(\"dirigido\").innerHTML = 'El grafo es Dirigido';\n  } else {\n    document.getElementById(\"dirigido\").innerHTML = 'El grafo es Simple';\n  }\n\n  if (functions.EsConexo() == true) {\n    document.getElementById(\"conexo\").innerHTML = 'El grafo es Conexo';\n  } else {\n    document.getElementById(\"conexo\").innerHTML = 'El grafo es Inconexo';\n  }\n\n  if (functions.EsRegular() == true) {\n    document.getElementById(\"regular\").innerHTML = 'El grafo es Regular';\n  } else {\n    document.getElementById(\"regular\").innerHTML = 'El grafo no es Regular';\n  }\n\n  if (functions.EsCiclico() == true) {\n    document.getElementById(\"ciclico\").innerHTML = 'El grafo es ciclico';\n  } else {\n    document.getElementById(\"ciclico\").innerHTML = 'El grafo es Aciclico';\n  }\n\n  if (functions.EsCompleto() == true) {\n    document.getElementById(\"completo\").innerHTML = 'El grafo es Completo';\n  } else {\n    document.getElementById(\"completo\").innerHTML = 'El grafo es Incompleto';\n  }\n};\n\nconst App = () => {\n  _s();\n\n  const createNode = (x, y, selected) => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter + 1;\n      const from = parseInt(selected);\n      var label = `${id}`;\n      if (id.toString().length == 1) label = ` ${id} `;\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id: id,\n            label: label,\n            color,\n            x,\n            y\n          }],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const createEdgeDoble = (selected, selectedAux) => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n      console.log(\"aqui1\");\n\n      if (isNaN(from)) {\n        return {\n          graph: {\n            nodes: [...nodes],\n            edges: [...edges]\n          },\n          counter: id,\n          ...rest\n        };\n      }\n\n      console.log(\"aqui2\");\n\n      for (let i of edges) {\n        if (i.from === from && i.to === to || i.to === from && i.from === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [...nodes],\n              edges: [...edges]\n            },\n            counter: id,\n            ...rest\n          };\n        }\n      }\n\n      tool = \"2await\";\n      console.log(\"aqui3\");\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges, {\n            from: from,\n            to: to,\n            sentido: `Simple`\n          }, {\n            from: to,\n            to: from,\n            sentido: `Simple`\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const createEdge = (selected, selectedAux) => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      if (isNaN(from)) {\n        return {\n          graph: {\n            nodes: [...nodes],\n            edges: [...edges]\n          },\n          counter: id,\n          ...rest\n        };\n      }\n\n      for (let i of edges) {\n        if (i.from === from && i.to === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [...nodes],\n              edges: [...edges]\n            },\n            counter: id,\n            ...rest\n          };\n        }\n      }\n\n      tool = \"await\";\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges, {\n            from: from,\n            to: to,\n            sentido: `Dirigido`\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const infoEdges = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      for (let i of edges) {\n        if (i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i);\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const infoNodes = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      for (let n of nodes) {\n        if (n.id === parseInt(selec)) {\n          console.log(\"Selected node:\");\n          console.log(n);\n          console.log(\"Edges:\");\n\n          for (let e of edges) {\n            if (e.from === n.id || e.to === n.id) {\n              console.log(e);\n            }\n          }\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const crearMatriz = () => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n      functions.Matriz(nodes, edges); //tipoGrafo(Vertices, Aristas)\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const [cursor, setCursor] = useState('crosshair');\n\n  const changeCursor = () => {\n    setCursor(prevState => {\n      console.log('setcursor');\n\n      if (prevState === 'crosshair') {\n        return 'pointer';\n      }\n\n      return 'nw-resize';\n    });\n  };\n\n  const [state2, setState2] = useState2({\n    counter: 0,\n    graph: {\n      nodes: [],\n      edges: []\n    },\n    events: {\n      selectNode: ({\n        nodes\n      }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes); //alert(\"Selected node: \" + nodes);\n\n        selectedNode = nodes;\n        selected = nodes; //infoNodes(nodes)\n\n        if (tool === \"edges-one\") createEdge(selectedNode, selectedAux);\n        if (tool === \"edges-doble\") createEdgeDoble(selectedNode, selectedAux);\n        crearMatriz();\n      },\n      selectEdge: ({\n        edges\n      }) => {\n        //infoEdges(edges)\n        crearMatriz();\n      },\n      doubleClick: ({\n        pointer: {\n          canvas\n        }\n      }) => {\n        if (tool === \"nodes\") createNode(canvas.x, canvas.y, selectedNode);\n        crearMatriz();\n      },\n      hoverEdge: ({\n        pointer: {\n          canvas\n        }\n      }) => {//createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode: () => {\n        console.log(\"Deselected node:\");\n        console.log(selected);\n        selectedAux = selected;\n\n        if (tool === \"await2\") {\n          tool = \"edges-one\";\n        }\n\n        if (tool === \"await\") {\n          tool = \"await2\";\n        }\n\n        if (tool === \"2await2\") {\n          tool = \"edges-doble\";\n        }\n\n        if (tool === \"2await\") {\n          tool = \"2await2\";\n        }\n      },\n      deselectEdge: () => {\n        console.log(\"Deselected edge:\");\n        console.log(selected);\n        selectedAux = selected;\n      }\n    }\n  });\n  const [state, setState] = useState({\n    counter: 0,\n    graph: {\n      nodes: [],\n      edges: []\n    },\n    events: {\n      selectNode: ({\n        nodes\n      }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes); //alert(\"Selected node: \" + nodes);\n\n        selectedNode = nodes;\n        selected = nodes; //infoNodes(nodes)\n\n        if (tool === \"edges-one\") createEdge(selectedNode, selectedAux);\n        if (tool === \"edges-doble\") createEdgeDoble(selectedNode, selectedAux);\n        crearMatriz();\n      },\n      selectEdge: ({\n        edges\n      }) => {\n        //infoEdges(edges)\n        crearMatriz();\n      },\n      doubleClick: ({\n        pointer: {\n          canvas\n        }\n      }) => {\n        if (tool === \"nodes\") createNode(canvas.x, canvas.y, selectedNode);\n        crearMatriz();\n      },\n      hoverEdge: ({\n        pointer: {\n          canvas\n        }\n      }) => {//createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode: () => {\n        console.log(\"Deselected node:\");\n        console.log(selected);\n        selectedAux = selected;\n\n        if (tool === \"await2\") {\n          tool = \"edges-one\";\n        }\n\n        if (tool === \"await\") {\n          tool = \"await2\";\n        }\n\n        if (tool === \"2await2\") {\n          tool = \"edges-doble\";\n        }\n\n        if (tool === \"2await\") {\n          tool = \"2await2\";\n        }\n      },\n      deselectEdge: () => {\n        console.log(\"Deselected edge:\");\n        console.log(selected);\n        selectedAux = selected;\n      }\n    }\n  });\n  const {\n    graph,\n    events\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(Graph, {\n          graph: graph,\n          options: options,\n          events: events,\n          style: {\n            height: \"100vh\",\n            cursor: cursor\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 462,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"vfoEKYSjrKHpu2Hc4P94JV9q2bY=\", true);\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/thesn/OneDrive - utem.cl/Escritorio/Universidad/6to Semestre/Graphs/grafos-react/src/App.js"],"names":["Graph","React","createRef","useState","functions","options","layout","hierarchical","edges","color","Aristas","Vertices","tool","selected","selectedAux","selectedNode","selectedEdge","randomColor","red","Math","floor","random","toString","padStart","green","blue","colores","length","crearNode","document","querySelector","crearEdge","crearEdgeDoble","closebtn","sidebar","addEventListener","setAttribute","console","log","className","e","getElementById","onclick","innerHTML","CantidadV","CantidadA","EsDirigido","EsConexo","EsRegular","EsCiclico","EsCompleto","App","createNode","x","y","setState","graph","nodes","counter","rest","id","from","parseInt","label","createEdgeDoble","to","isNaN","i","sentido","createEdge","infoEdges","selec","infoNodes","n","crearMatriz","Matriz","cursor","setCursor","changeCursor","prevState","state2","setState2","useState2","events","selectNode","selectEdge","doubleClick","pointer","canvas","hoverEdge","deselectNode","deselectEdge","state","height"],"mappings":"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","sourcesContent":["import './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { createRef, useState } from \"react\";\nimport functions from './functions';\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nvar Aristas = []\nvar Vertices = []\n\nvar tool = \"nodes\"\nvar selected\nvar selectedAux\nvar selectedNode\nvar selectedEdge\nvar color = randomColor()\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  //return `#${red}${green}${blue}`;\n\n  const colores = ['white','#FF93EB','#1C80B5','#1C34B5','#511CB5','#9D1CB5','#B51C80','#B51C33']\n  return colores[Math.floor(Math.random()*colores.length)];\n\n}\n\nconst crearNode = document.querySelector('button[name=nodes]')\nconst crearEdge = document.querySelector('button[name=edges-one]')\nconst crearEdgeDoble = document.querySelector('button[name=edges-doble]')\nconst closebtn = document.querySelector('button[name=closebtn]')\nconst sidebar = document.querySelector('.sidebar_left')\n\nclosebtn.addEventListener(\"click\", () => {\n  closebtn.setAttribute(\"class\",\"closebtn on\")\n  console.log(sidebar.className)\n  if(sidebar.className === \"sidebar_left\") {\n    sidebar.setAttribute(\"class\",\"sidebar_left_closed\")\n  }\n  else {\n    closebtn.setAttribute(\"class\",\"closebtn\")\n    sidebar.setAttribute(\"class\",\"sidebar_left\")\n  }\n})\n\ncrearNode.addEventListener(\"click\", () => {\n  document.querySelector(\".edges-one\").setAttribute(\"class\", \"edges-one\")\n  document.querySelector(\".edges-doble\").setAttribute(\"class\", \"edges-doble\")\n  crearNode.setAttribute(\"class\",\"nodes on\")\n  console.log(\"Tool: nodes\")\n  tool = \"nodes\"\n  //changeCursor()\n})\n\ncrearEdge.addEventListener(\"click\", () => {\n  //document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n  document.querySelector(\".nodes\").setAttribute(\"class\", \"nodes\")\n  document.querySelector(\".edges-doble\").setAttribute(\"class\", \"edges-doble\")\n  crearEdge.setAttribute(\"class\",\"edges-one on\")\n  console.log(\"Tool: edges-one\")\n  tool = \"edges-one\"\n  //changeCursor()\n})\n\ncrearEdgeDoble.addEventListener(\"click\", (e) => {\n  //document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n  document.querySelector(\".nodes\").setAttribute(\"class\", \"nodes\")\n  document.querySelector(\".edges-one\").setAttribute(\"class\", \"edges-one\")\n  crearEdgeDoble.setAttribute(\"class\",\"edges-doble on\")\n  console.log(\"Tool: edges-doble\")\n  tool = \"edges-doble\"\n  //changeCursor()\n})\n\n\ndocument.getElementById(\"matriz\").onclick = function() {\n    document.getElementById(\"cantidadv\").innerHTML = 'Cantidad de vertices: '+functions.CantidadV();\n    document.getElementById(\"cantidada\").innerHTML = 'Cantidad de Aristas: '+functions.CantidadA();\n    if(functions.EsDirigido() == false){\n      document.getElementById(\"dirigido\").innerHTML = 'El grafo es Dirigido'\n    }\n    else{document.getElementById(\"dirigido\").innerHTML = 'El grafo es Simple'}\n\n    if(functions.EsConexo() == true){\n      document.getElementById(\"conexo\").innerHTML = 'El grafo es Conexo';\n    }\n    else{\n      document.getElementById(\"conexo\").innerHTML = 'El grafo es Inconexo';\n    }\n    \n    if(functions.EsRegular() == true){\n      document.getElementById(\"regular\").innerHTML = 'El grafo es Regular'\n    }\n    else{document.getElementById(\"regular\").innerHTML = 'El grafo no es Regular'}\n\n    if(functions.EsCiclico() == true){\n      document.getElementById(\"ciclico\").innerHTML = 'El grafo es ciclico'\n    }\n    else{document.getElementById(\"ciclico\").innerHTML = 'El grafo es Aciclico'}\n\n    if(functions.EsCompleto() == true){\n      document.getElementById(\"completo\").innerHTML = 'El grafo es Completo'\n    }\n    else{document.getElementById(\"completo\").innerHTML = 'El grafo es Incompleto'}\n  }\n\nconst App = () => {\n  const createNode = (x, y, selected) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      const from = parseInt(selected)\n      var label = `${id}`\n      if (id.toString().length == 1)\n        label = ` ${id} `\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id: id, label: label, color, x, y }\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  \n  const createEdgeDoble = (selected, selectedAux) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      console.log(\"aqui1\")\n      if (isNaN(from)) {\n        return {\n          graph: {\n            nodes: [\n              ...nodes,\n            ],\n            edges: [\n              ...edges,\n            ]\n          },\n          counter: id,\n          ...rest\n        }\n      }\n      console.log(\"aqui2\")\n      for(let i of edges) {\n        if(i.from === from && i.to === to || i.to === from && i.from === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [\n                ...nodes,\n              ],\n              edges: [\n                ...edges,\n              ]\n            },\n            counter: id,\n            ...rest\n          }\n        }\n      }\n      tool = \"2await\"\n      console.log(\"aqui3\")\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n            {from: from, to: to, sentido: `Simple`},\n            {from: to, to: from, sentido: `Simple`}\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const createEdge = (selected, selectedAux) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      if (isNaN(from)) {\n        return {\n          graph: {\n            nodes: [\n              ...nodes,\n            ],\n            edges: [\n              ...edges,\n            ]\n          },\n          counter: id,\n          ...rest\n        }\n      }\n      for(let i of edges) {\n        if(i.from === from && i.to === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [\n                ...nodes,\n              ],\n              edges: [\n                ...edges,\n              ]\n            },\n            counter: id,\n            ...rest\n          }\n        }\n      }\n      tool = \"await\"\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n            {from: from, to: to, sentido: `Dirigido`}\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const infoEdges = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      for(let i of edges) {\n        if(i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i)\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const infoNodes = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      for(let n of nodes) {\n        if(n.id === parseInt(selec)) {\n          console.log(\"Selected node:\");\n          console.log(n)\n          console.log(\"Edges:\");\n          for(let e of edges) {\n            if(e.from === n.id || e.to === n.id) {\n              console.log(e)\n            }\n          }\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const crearMatriz = () => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      functions.Matriz(nodes, edges)\n      //tipoGrafo(Vertices, Aristas)\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const [cursor, setCursor] = useState('crosshair');\n\n  const changeCursor = () => {\n    setCursor(prevState => {\n      console.log('setcursor')\n      if(prevState === 'crosshair'){\n        return 'pointer';\n      }\n      return 'nw-resize';\n    });\n  }\n\n  const [state2, setState2] = useState2({\n    counter: 0,\n    graph: {\n      nodes: [\n      ],\n      edges: [],\n    },\n    events: {\n      selectNode: ({ nodes }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        //alert(\"Selected node: \" + nodes);\n        selectedNode = nodes\n        selected = nodes\n        //infoNodes(nodes)\n        if(tool === \"edges-one\")\n        createEdge(selectedNode, selectedAux);\n        if(tool === \"edges-doble\")\n        createEdgeDoble(selectedNode, selectedAux);\n        crearMatriz()\n      },\n      selectEdge: ({ edges }) => {\n        //infoEdges(edges)\n        crearMatriz()\n      },\n      doubleClick: ({ pointer: { canvas } }) => {\n        if(tool === \"nodes\") \n        createNode(canvas.x, canvas.y, selectedNode);\n        crearMatriz()\n      },\n      hoverEdge: ({ pointer: { canvas } }) => {\n        //createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode:  () => {\n        console.log(\"Deselected node:\");\n        console.log(selected);\n        selectedAux = selected\n        if (tool === \"await2\") {\n          tool = \"edges-one\"\n        }\n        if (tool === \"await\") {\n          tool = \"await2\"\n        }\n        if (tool === \"2await2\") {\n          tool = \"edges-doble\"\n        }\n        if (tool === \"2await\") {\n          tool = \"2await2\"\n        }\n        \n      },\n      deselectEdge:  () => {\n        console.log(\"Deselected edge:\");\n        console.log(selected);\n        selectedAux = selected\n      }\n    }\n  })\n\n  const [state, setState] = useState({\n    counter: 0,\n    graph: {\n      nodes: [\n      ],\n      edges: [],\n    },\n    events: {\n      selectNode: ({ nodes }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        //alert(\"Selected node: \" + nodes);\n        selectedNode = nodes\n        selected = nodes\n        //infoNodes(nodes)\n        if(tool === \"edges-one\")\n        createEdge(selectedNode, selectedAux);\n        if(tool === \"edges-doble\")\n        createEdgeDoble(selectedNode, selectedAux);\n        crearMatriz()\n      },\n      selectEdge: ({ edges }) => {\n        //infoEdges(edges)\n        crearMatriz()\n      },\n      doubleClick: ({ pointer: { canvas } }) => {\n        if(tool === \"nodes\") \n        createNode(canvas.x, canvas.y, selectedNode);\n        crearMatriz()\n      },\n      hoverEdge: ({ pointer: { canvas } }) => {\n        //createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode:  () => {\n        console.log(\"Deselected node:\");\n        console.log(selected);\n        selectedAux = selected\n        if (tool === \"await2\") {\n          tool = \"edges-one\"\n        }\n        if (tool === \"await\") {\n          tool = \"await2\"\n        }\n        if (tool === \"2await2\") {\n          tool = \"edges-doble\"\n        }\n        if (tool === \"2await\") {\n          tool = \"2await2\"\n        }\n        \n      },\n      deselectEdge:  () => {\n        console.log(\"Deselected edge:\");\n        console.log(selected);\n        selectedAux = selected\n      }\n    }\n  })\n  \n  const { graph, events } = state;\n  \n  return (\n    <div>\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <Graph graph={graph} options={options} events={events} style={{ height: \"100vh\", cursor: cursor }}/>\n      </header>\n      </div>\n    </div>\n  );\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}