{"ast":null,"code":"var Matriz;\nvar Index;\nvar MatrizAdy;\nvar columnas;\nmodule.exports = {\n  Matriz: function (Vertices, Aristas) {\n    Matriz = [];\n\n    for (let i = 0; i < Vertices.length; i++) {\n      Matriz[i] = new Array(Vertices.length);\n    } // Da valor 0 a cada elemento de la matriz\n\n\n    for (let i = 0; i < Vertices.length; i++) {\n      for (let j = 0; j < Vertices.length; j++) {\n        Matriz[i][j] = 0;\n      }\n    }\n\n    this.mostrarMatriz(Vertices, Aristas);\n  },\n  mostrarMatriz: function (Vertices, Aristas) {\n    let columnas2 = [];\n    this.matrizAdyacencia(Vertices, Aristas);\n\n    for (let i = 0; i < Vertices.length; i++) {\n      columnas = [];\n\n      for (let j = 0; j < Vertices.length; j++) {\n        columnas += `${Matriz[i][j]} `;\n      }\n\n      columnas = columnas.split(\" \");\n      columnas.pop();\n      columnas = columnas.join(\" \");\n      columnas2 += `${i + 1} | ${columnas}</p/>`; //console.log(`${i+1} | ${columnas}`)\n    } //alert(Index)\n\n\n    var tabla = \"<table border=\\\"0\\\">\";\n    tabla += \"<tr><td></td>\";\n\n    for (let j = 0; j < Vertices.length; j++) {\n      tabla += \"<td>\" + (j + 1) + \"</td>\";\n    }\n\n    for (let i = 0; i < Vertices.length; i++) {\n      tabla += \"<tr>\";\n      tabla += \"<td>\" + (i + 1) + \"</td>\";\n\n      for (let j = 0; j < Vertices.length; j++) {\n        tabla += \"<td>\" + Matriz[i][j] + \"</td>\";\n      }\n\n      tabla += \"</tr>\";\n    }\n\n    tabla += \"</table>\";\n    document.getElementById(\"resultado\").innerHTML = tabla;\n  },\n  matrizAdyacencia: function (Vertices, Aristas) {\n    for (let arista of Aristas) {\n      Matriz[arista.from - 1][arista.to - 1] = 1;\n    }\n  },\n  tipoGrafo: function (Vertices, Aristas) {\n    for (let i = 0; i < Aristas.length; i++) {\n      //console.log(`from ${Aristas[i].from} to ${Aristas[i].to}`)\n      //console.log((Aristas[i].sentido))\n      var aux = 0;\n\n      if (Aristas[i].sentido !== 'Simple') {\n        console.log(\"Es dirigido\");\n        aux = 1;\n      } else {}\n\n      if (aux === 1) {\n        return;\n      }\n    }\n\n    console.log(\"Es Simple\");\n  }\n};","map":{"version":3,"sources":["C:/Users/thesn/OneDrive - utem.cl/Escritorio/Universidad/6to Semestre/Graphs/grafos-react/src/functions.js"],"names":["Matriz","Index","MatrizAdy","columnas","module","exports","Vertices","Aristas","i","length","Array","j","mostrarMatriz","columnas2","matrizAdyacencia","split","pop","join","tabla","document","getElementById","innerHTML","arista","from","to","tipoGrafo","aux","sentido","console","log"],"mappings":"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","sourcesContent":["var Matriz\r\nvar Index\r\nvar MatrizAdy \r\nvar columnas \r\nmodule.exports = {\r\n    Matriz: function (Vertices, Aristas) {\r\n        Matriz = []\r\n        for (let i = 0; i < Vertices.length; i++) {\r\n            Matriz[i] = new Array(Vertices.length)\r\n        }\r\n        // Da valor 0 a cada elemento de la matriz\r\n        for (let i = 0; i < Vertices.length; i++) {\r\n            for (let j = 0; j < Vertices.length; j++) {\r\n                Matriz[i][j] = 0\r\n            }  \r\n        }\r\n        this.mostrarMatriz(Vertices, Aristas)\r\n      },\r\n      \r\n    mostrarMatriz: function (Vertices, Aristas) {\r\n        let columnas2 = []\r\n        \r\n        this.matrizAdyacencia(Vertices, Aristas)\r\n        for (let i = 0; i < Vertices.length; i++) {\r\n            columnas = []\r\n            for (let j = 0; j < Vertices.length; j++) {\r\n                columnas += `${Matriz[i][j]} ` \r\n            }\r\n            columnas = columnas.split(\" \") \r\n            columnas.pop()\r\n            columnas = columnas.join(\" \")\r\n            columnas2 += `${i+1} | ${columnas}</p/>`\r\n            //console.log(`${i+1} | ${columnas}`)\r\n        }\r\n\r\n        //alert(Index)\r\n\r\n        var tabla=\"<table border=\\\"0\\\">\";\r\n    \r\n        tabla+=\"<tr><td></td>\";\r\n        for(let j=0; j<Vertices.length ;j++){ \r\n            tabla+=\"<td>\"+(j+1)+ \"</td>\";\r\n        }\r\n\r\n        for(let i=0; i < Vertices.length; i++) {\r\n            tabla+=\"<tr>\";\r\n            tabla+=\"<td>\" + (i+1) + \"</td>\";\r\n            for(let j=0; j < Vertices.length; j++) { \r\n                tabla+=\"<td>\" + Matriz[i][j] + \"</td>\";\r\n            }\r\n        tabla+=\"</tr>\";\r\n        }\r\n        tabla+=\"</table>\";\r\n        document.getElementById(\"resultado\").innerHTML=tabla;\r\n      },\r\n\r\n    matrizAdyacencia: function (Vertices, Aristas) {\r\n        for(let arista of Aristas) {\r\n            Matriz[arista.from - 1][arista.to - 1] = 1\r\n          }\r\n    },\r\n\r\n    tipoGrafo: function (Vertices, Aristas) {\r\n        for (let i = 0; i < Aristas.length; i++) {\r\n            //console.log(`from ${Aristas[i].from} to ${Aristas[i].to}`)\r\n            //console.log((Aristas[i].sentido))\r\n            var aux = 0\r\n            if(Aristas[i].sentido !== 'Simple') {\r\n                console.log(\"Es dirigido\")\r\n                aux = 1\r\n            } else {\r\n            } if (aux === 1) {\r\n                return;\r\n            }\r\n        }\r\n        console.log(\"Es Simple\")\r\n    },\r\n}"]},"metadata":{},"sourceType":"module"}