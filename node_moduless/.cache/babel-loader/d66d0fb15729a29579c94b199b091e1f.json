{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesn\\\\OneDrive - utem.cl\\\\Escritorio\\\\Universidad\\\\6to Semestre\\\\Graphs\\\\grafos-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { createRef, useState } from \"react\";\nimport functions from './functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\nvar Aristas = [];\nvar Vertices = [];\nvar tool = \"nodes\";\nvar selected;\nvar selectedAux;\nvar selectedNode;\nvar selectedEdge;\nvar color = randomColor();\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nconst crearNode = document.querySelector('button[name=nodes]');\nconst crearEdge = document.querySelector('button[name=edges-one]');\nconst crearEdgeDoble = document.querySelector('button[name=edges-doble]');\nconst closebtn = document.querySelector('button[name=closebtn]');\nconst sidebar = document.querySelector('.sidebar_left');\nclosebtn.addEventListener(\"click\", () => {\n  closebtn.setAttribute(\"class\", \"closebtn on\");\n  console.log(sidebar.className);\n\n  if (sidebar.className === \"sidebar_left\") {\n    sidebar.setAttribute(\"class\", \"sidebar_left_closed\");\n  } else {\n    closebtn.setAttribute(\"class\", \"closebtn\");\n    sidebar.setAttribute(\"class\", \"sidebar_left\");\n  }\n});\ncrearNode.addEventListener(\"click\", () => {\n  document.querySelectorAll(\".tool\").forEach(function (x) {\n    x.setAttribute(\"class\", \"tool\");\n  });\n  crearNode.setAttribute(\"class\", \"tool on\");\n  console.log(\"Tool: nodes\");\n  tool = \"nodes\"; //changeCursor()\n});\ncrearEdge.addEventListener(\"click\", () => {\n  document.querySelectorAll(\".tool\").forEach(function (x) {\n    x.setAttribute(\"class\", \"tool\");\n  });\n  crearEdge.setAttribute(\"class\", \"tool on\");\n  console.log(\"Tool: edges-one\");\n  tool = \"edges-one\"; //changeCursor()\n});\ncrearEdgeDoble.addEventListener(\"click\", e => {\n  document.querySelectorAll(\".tool\").forEach(function (x) {\n    x.setAttribute(\"class\", \"tool\");\n  });\n  crearEdgeDoble.setAttribute(\"class\", \"tool on\");\n  console.log(\"Tool: nodes-doble\");\n  tool = \"nodes\"; //changeCursor()\n});\n\nconst App = () => {\n  _s();\n\n  const createNode = (x, y, selected) => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter + 1;\n      const from = parseInt(selected);\n      selected = null;\n      selectedAux = null;\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id: id,\n            label: `Node ${id}`,\n            color,\n            x,\n            y\n          }],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const createEdge = (selected, selectedAux) => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n      selected = NaN;\n\n      if (isNaN(from)) {\n        return {\n          graph: {\n            nodes: [...nodes],\n            edges: [...edges]\n          },\n          counter: id,\n          ...rest\n        };\n      }\n\n      for (let i of edges) {\n        if (i.from === from && i.to === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [...nodes],\n              edges: [...edges]\n            },\n            counter: id,\n            ...rest\n          };\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges, {\n            from: from,\n            to: to,\n            sentido: `Dirigido`\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const infoEdges = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n      selected = null;\n      selectedAux = null;\n\n      for (let i of edges) {\n        if (i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i);\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const infoNodes = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      for (let n of nodes) {\n        if (n.id === parseInt(selec)) {\n          console.log(\"Selected node:\");\n          console.log(n);\n          console.log(\"Edges:\");\n\n          for (let e of edges) {\n            if (e.from === n.id || e.to === n.id) {\n              console.log(e);\n            }\n          }\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const crearMatriz = () => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n      functions.Matriz(nodes, edges); //tipoGrafo(Vertices, Aristas)\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const [cursor, setCursor] = useState('crosshair');\n\n  const changeCursor = () => {\n    setCursor(prevState => {\n      console.log('setcursor');\n\n      if (prevState === 'crosshair') {\n        return 'pointer';\n      }\n\n      return 'nw-resize';\n    });\n  };\n\n  const [state, setState] = useState({\n    counter: 1,\n    graph: {\n      nodes: [{\n        id: 1,\n        label: `Node ${1}`,\n        color\n      }],\n      edges: []\n    },\n    events: {\n      selectNode: ({\n        nodes\n      }) => {\n        //console.log(\"Selected nodes:\");\n        //console.log(nodes);\n        //alert(\"Selected node: \" + nodes);\n        selectedNode = nodes;\n        selected = nodes; //infoNodes(nodes)\n\n        if (tool === \"edges-one\") createEdge(selectedNode, selectedAux);\n        crearMatriz();\n      },\n      selectEdge: ({\n        edges\n      }) => {\n        //infoEdges(edges)\n        crearMatriz();\n      },\n      doubleClick: ({\n        pointer: {\n          canvas\n        }\n      }) => {\n        if (tool === \"nodes\") createNode(canvas.x, canvas.y, selectedNode);\n        crearMatriz();\n      },\n      hoverEdge: ({\n        pointer: {\n          canvas\n        }\n      }) => {//createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode: () => {\n        //console.log(\"Deselected node:\");\n        //console.log(selected);\n        selectedAux = selected;\n      },\n      deselectEdge: () => {\n        //console.log(\"Deselected edge:\");\n        //console.log(selected);\n        selectedAux = selected;\n      }\n    }\n  });\n  const {\n    graph,\n    events\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(Graph, {\n          graph: graph,\n          options: options,\n          events: events,\n          style: {\n            height: \"100vh\",\n            cursor: cursor\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"EOYWSwk2pyS4VFBE1kuP8Jny6Zc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/thesn/OneDrive - utem.cl/Escritorio/Universidad/6to Semestre/Graphs/grafos-react/src/App.js"],"names":["Graph","React","createRef","useState","functions","options","layout","hierarchical","edges","color","Aristas","Vertices","tool","selected","selectedAux","selectedNode","selectedEdge","randomColor","red","Math","floor","random","toString","padStart","green","blue","crearNode","document","querySelector","crearEdge","crearEdgeDoble","closebtn","sidebar","addEventListener","setAttribute","console","log","className","querySelectorAll","forEach","x","e","App","createNode","y","setState","graph","nodes","counter","rest","id","from","parseInt","label","createEdge","to","NaN","isNaN","i","sentido","infoEdges","selec","infoNodes","n","crearMatriz","Matriz","cursor","setCursor","changeCursor","prevState","state","events","selectNode","selectEdge","doubleClick","pointer","canvas","hoverEdge","deselectNode","deselectEdge","height"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { createRef, useState } from \"react\";\nimport functions from './functions';\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nvar Aristas = []\nvar Vertices = []\n\nvar tool = \"nodes\"\nvar selected\nvar selectedAux\nvar selectedNode\nvar selectedEdge\nvar color = randomColor()\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nconst crearNode = document.querySelector('button[name=nodes]')\nconst crearEdge = document.querySelector('button[name=edges-one]')\nconst crearEdgeDoble = document.querySelector('button[name=edges-doble]')\nconst closebtn = document.querySelector('button[name=closebtn]')\nconst sidebar = document.querySelector('.sidebar_left')\n\nclosebtn.addEventListener(\"click\", () => {\n  closebtn.setAttribute(\"class\",\"closebtn on\")\n  console.log(sidebar.className)\n  if(sidebar.className === \"sidebar_left\") {\n    sidebar.setAttribute(\"class\",\"sidebar_left_closed\")\n  }\n  else {\n    closebtn.setAttribute(\"class\",\"closebtn\")\n    sidebar.setAttribute(\"class\",\"sidebar_left\")\n  }\n})\n\ncrearNode.addEventListener(\"click\", () => {\n  document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n  crearNode.setAttribute(\"class\",\"tool on\")\n  console.log(\"Tool: nodes\")\n  tool = \"nodes\"\n  //changeCursor()\n})\n\ncrearEdge.addEventListener(\"click\", () => {\n  document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n  crearEdge.setAttribute(\"class\",\"tool on\")\n  console.log(\"Tool: edges-one\")\n  tool = \"edges-one\"\n  //changeCursor()\n})\n\ncrearEdgeDoble.addEventListener(\"click\", (e) => {\n  document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n  crearEdgeDoble.setAttribute(\"class\",\"tool on\")\n  console.log(\"Tool: nodes-doble\")\n  tool = \"nodes\"\n  //changeCursor()\n})\n\nconst App = () => {\n  const createNode = (x, y, selected) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      const from = parseInt(selected)\n      selected = null\n      selectedAux = null\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id: id, label: `Node ${id}`, color, x, y }\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  \n  const createEdge = (selected, selectedAux) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      selected = NaN\n      if (isNaN(from)) {\n        return {\n          graph: {\n            nodes: [\n              ...nodes,\n            ],\n            edges: [\n              ...edges,\n            ]\n          },\n          counter: id,\n          ...rest\n        }\n      }\n      for(let i of edges) {\n        if(i.from === from && i.to === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [\n                ...nodes,\n              ],\n              edges: [\n                ...edges,\n              ]\n            },\n            counter: id,\n            ...rest\n          }\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n            {from: from, to: to, sentido: `Dirigido`}\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const infoEdges = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      selected = null\n      selectedAux = null\n      for(let i of edges) {\n        if(i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i)\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const infoNodes = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      for(let n of nodes) {\n        if(n.id === parseInt(selec)) {\n          console.log(\"Selected node:\");\n          console.log(n)\n          console.log(\"Edges:\");\n          for(let e of edges) {\n            if(e.from === n.id || e.to === n.id) {\n              console.log(e)\n            }\n          }\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const crearMatriz = () => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      functions.Matriz(nodes, edges)\n      //tipoGrafo(Vertices, Aristas)\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const [cursor, setCursor] = useState('crosshair');\n\n  const changeCursor = () => {\n    setCursor(prevState => {\n      console.log('setcursor')\n      if(prevState === 'crosshair'){\n        return 'pointer';\n      }\n      return 'nw-resize';\n    });\n  }\n\n  const [state, setState] = useState({\n    counter: 1,\n    graph: {\n      nodes: [\n        { id: 1, label: `Node ${1}`, color }\n      ],\n      edges: [],\n    },\n    events: {\n      selectNode: ({ nodes }) => {\n        //console.log(\"Selected nodes:\");\n        //console.log(nodes);\n        //alert(\"Selected node: \" + nodes);\n        selectedNode = nodes\n        selected = nodes\n        //infoNodes(nodes)\n        if(tool === \"edges-one\")\n        createEdge(selectedNode, selectedAux);\n        crearMatriz()\n      },\n      selectEdge: ({ edges }) => {\n        //infoEdges(edges)\n        crearMatriz()\n      },\n      doubleClick: ({ pointer: { canvas } }) => {\n        if(tool === \"nodes\") \n        createNode(canvas.x, canvas.y, selectedNode);\n        crearMatriz()\n      },\n      hoverEdge: ({ pointer: { canvas } }) => {\n        //createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode:  () => {\n        //console.log(\"Deselected node:\");\n        //console.log(selected);\n        selectedAux = selected\n      },\n      deselectEdge:  () => {\n        //console.log(\"Deselected edge:\");\n        //console.log(selected);\n        selectedAux = selected\n      }\n    }\n  })\n  const { graph, events } = state;\n  return (\n    <div>\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <Graph graph={graph} options={options} events={events} style={{ height: \"100vh\", cursor: cursor }}/>\n      </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}