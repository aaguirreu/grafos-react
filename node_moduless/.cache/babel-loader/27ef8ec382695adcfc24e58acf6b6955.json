{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesn\\\\OneDrive - utem.cl\\\\Escritorio\\\\Universidad\\\\6to Semestre\\\\Graphs\\\\grafos-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nconst App = () => {\n  _s();\n\n  const createNode = (x, y, selected) => {\n    const color = randomColor();\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter + 1;\n      var from = Math.floor(Math.random() * (counter - 1)) + 1;\n      from = parseInt(selected);\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id: id,\n            label: `Node ${id}`,\n            color,\n            x,\n            y\n          }],\n          edges: [...edges, {\n            from,\n            to: id\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  var nodesArr = [];\n  var edgesArr = [];\n\n  const createEdge = (selected, selectedAux) => {\n    const color = randomColor();\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n      selected = null;\n\n      for (let i of edges) {\n        if (i.from === from && i.to === to) {\n          console.log(`Ya existe ${i}`);\n          return {\n            graph: {\n              nodes: [...nodes],\n              edges: [...edges]\n            },\n            counter: id,\n            ...rest\n          };\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges, {\n            from: from,\n            to: to\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const infoEdges = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      for (let i of edges) {\n        if (i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i);\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        ...rest\n      };\n    });\n  };\n\n  const infoNodes = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      for (let i of nodes) {\n        console.log(i.id);\n\n        if (i.id === selec.toString()) {\n          console.log(\"Selected node:\");\n          console.log(i);\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  var selected;\n  var selectedAux;\n  var selectedNode;\n  var selectedEdge;\n  const [state, setState] = useState({\n    counter: 1,\n    graph: {\n      nodes: [{\n        id: 1,\n        label: `Node ${1}`,\n        randomColor\n      }],\n      edges: []\n    },\n    events: {\n      selectNode: ({\n        nodes\n      }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes); //alert(\"Selected node: \" + nodes);\n\n        selectedNode = nodes;\n        selected = nodes;\n        infoNodes(nodes);\n        createEdge(selectedNode, selectedAux);\n      },\n      selectEdge: ({\n        edges\n      }) => {\n        infoEdges(edges);\n      },\n      doubleClick: ({\n        pointer: {\n          canvas\n        }\n      }) => {\n        createNode(canvas.x, canvas.y, selectedNode, selectedAux); //if(edgesArr.includes(selected))\n        //createEdge(selectedNode, selectedAux);\n      },\n      hoverEdge: ({\n        pointer: {\n          canvas\n        }\n      }) => {//createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode: () => {\n        //console.log(\"Deselected node:\");\n        //console.log(selected);\n        selectedAux = selected;\n      },\n      deselectEdge: () => {\n        //console.log(\"Deselected edge:\");\n        //console.log(selected);\n        selectedAux = selected;\n      }\n    }\n  });\n  const {\n    graph,\n    events\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(Graph, {\n          graph: graph,\n          options: options,\n          events: events,\n          style: {\n            height: \"100vh\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"/UtmqysU0VuJmLYAi/H8yw3oT5Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/thesn/OneDrive - utem.cl/Escritorio/Universidad/6to Semestre/Graphs/grafos-react/src/App.js"],"names":["Graph","React","useState","options","layout","hierarchical","edges","color","randomColor","red","Math","floor","random","toString","padStart","green","blue","App","createNode","x","y","selected","setState","graph","nodes","counter","rest","id","from","parseInt","label","to","nodesArr","edgesArr","createEdge","selectedAux","i","console","log","infoEdges","selec","infoNodes","selectedNode","selectedEdge","state","events","selectNode","selectEdge","doubleClick","pointer","canvas","hoverEdge","deselectNode","deselectEdge","height"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { useState } from \"react\";\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nconst App = () => {\n  const createNode = (x, y, selected) => {\n    const color = randomColor();\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      var from = Math.floor(Math.random() * (counter - 1)) + 1;\n      from = parseInt(selected)\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id: id, label: `Node ${id}`, color, x, y }\n          ],\n          edges: [\n            ...edges,\n            { from, to: id }\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  var nodesArr = []\n  var edgesArr = []\n  const createEdge = (selected, selectedAux) => {\n    const color = randomColor();\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      selected = null\n      for(let i of edges) {\n        if(i.from === from && i.to === to) {\n          console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [\n                ...nodes,\n              ],\n              edges: [\n                ...edges,\n              ]\n            },\n            counter: id,\n            ...rest\n          }\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n            {from: from, to: to}\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const infoEdges = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      for(let i of edges) {\n        if(i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i)\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        ...rest\n      }\n    });\n  }\n\n  const infoNodes = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      for(let i of nodes) {\n        console.log(i.id)\n        if(i.id === selec.toString()) {\n          console.log(\"Selected node:\");\n          console.log(i)\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  var selected\n  var selectedAux\n  var selectedNode\n  var selectedEdge\n\n  const [state, setState] = useState({\n    counter: 1,\n    graph: {\n      nodes: [\n        { id: 1, label: `Node ${1}`, randomColor }\n      ],\n      edges: [\n      ],\n    },\n    events: {\n      selectNode: ({ nodes }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        //alert(\"Selected node: \" + nodes);\n        selectedNode = nodes\n        selected = nodes\n        infoNodes(nodes)\n        createEdge(selectedNode, selectedAux);\n      },\n      selectEdge: ({ edges }) => {\n        infoEdges(edges)\n      },\n      doubleClick: ({ pointer: { canvas } }) => {\n        createNode(canvas.x, canvas.y, selectedNode, selectedAux);\n        //if(edgesArr.includes(selected))\n        //createEdge(selectedNode, selectedAux);\n      },\n      hoverEdge: ({ pointer: { canvas } }) => {\n        //createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode:  () => {\n        //console.log(\"Deselected node:\");\n        //console.log(selected);\n        selectedAux = selected\n      },\n      deselectEdge:  () => {\n        //console.log(\"Deselected edge:\");\n        //console.log(selected);\n        selectedAux = selected\n      }\n    }\n  })\n  const { graph, events } = state;\n  return (\n    <div>\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <Graph graph={graph} options={options} events={events} style={{ height: \"100vh\" }} />\n      </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}