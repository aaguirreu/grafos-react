{"ast":null,"code":"var Matriz = [];\nvar Index = [];\nvar MatrizAdy = [];\nvar columnas = [];\nmodule.exports = {\n  Matriz: function (Vertices, Aristas) {\n    Index = [];\n    Matriz = [];\n\n    for (let i = 0; i < Vertices.length; i++) {\n      Index += i.toString();\n    } //console.log(Index)\n\n\n    Index = Index.split(\",\");\n    Index.pop();\n    console.log(`  | ${Index}`);\n\n    for (let i = 0; i < Vertices.length; i++) {\n      Matriz.push(Index);\n    }\n\n    this.mostrarMatriz(Vertices, Aristas);\n  },\n  mostrarMatriz: function (Vertices, Aristas) {\n    columnas = [];\n\n    for (let i = 0; i < Vertices.length; i++) {\n      columnas += `${0},`;\n    }\n\n    columnas = columnas.split(\",\");\n    columnas.pop();\n\n    for (let i = 0; i < Vertices.length; i++) {\n      console.log(`${i} | ${columnas}`);\n    } //alert(Index)\n\n  },\n  matrizAdyacencia: function (Vertices, Aristas) {},\n  tipoGrafo: function (Vertices, Aristas) {\n    for (let i = 0; i < Aristas.length; i++) {\n      //console.log(`from ${Aristas[i].from} to ${Aristas[i].to}`)\n      //console.log((Aristas[i].sentido))\n      var aux = 0;\n\n      if (Aristas[i].sentido !== 'Simple') {\n        console.log(\"Es dirigido\");\n        aux = 1;\n      } else {}\n\n      if (aux === 1) {\n        return;\n      }\n    }\n\n    console.log(\"Es Simple\");\n  }\n};","map":{"version":3,"sources":["C:/Users/thesn/OneDrive - utem.cl/Escritorio/Universidad/6to Semestre/Graphs/grafos-react/src/functions.js"],"names":["Matriz","Index","MatrizAdy","columnas","module","exports","Vertices","Aristas","i","length","toString","split","pop","console","log","push","mostrarMatriz","matrizAdyacencia","tipoGrafo","aux","sentido"],"mappings":"AAAA,IAAIA,MAAM,GAAG,EAAb;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,QAAQ,GAAG,EAAf;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbL,EAAAA,MAAM,EAAE,UAAUM,QAAV,EAAoBC,OAApB,EAA6B;AACjCN,IAAAA,KAAK,GAAG,EAAR;AACAD,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCP,MAAAA,KAAK,IAAIO,CAAC,CAACE,QAAF,EAAT;AACH,KALgC,CAMjC;;;AACAT,IAAAA,KAAK,GAAGA,KAAK,CAACU,KAAN,CAAY,GAAZ,CAAR;AACAV,IAAAA,KAAK,CAACW,GAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,OAAMb,KAAM,EAAzB;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCR,MAAAA,MAAM,CAACe,IAAP,CAAYd,KAAZ;AACH;;AACD,SAAKe,aAAL,CAAmBV,QAAnB,EAA6BC,OAA7B;AACD,GAfU;AAiBbS,EAAAA,aAAa,EAAE,UAAUV,QAAV,EAAoBC,OAApB,EAA6B;AACxCJ,IAAAA,QAAQ,GAAG,EAAX;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCL,MAAAA,QAAQ,IAAK,GAAE,CAAE,GAAjB;AACH;;AACDA,IAAAA,QAAQ,GAAGA,QAAQ,CAACQ,KAAT,CAAe,GAAf,CAAX;AACAR,IAAAA,QAAQ,CAACS,GAAT;;AACA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCK,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEN,CAAE,MAAKL,QAAS,EAA/B;AACH,KATuC,CAUxC;;AACD,GA5BU;AA8Bbc,EAAAA,gBAAgB,EAAE,UAAUX,QAAV,EAAoBC,OAApB,EAA6B,CAE9C,CAhCY;AAkCbW,EAAAA,SAAS,EAAE,UAAUZ,QAAV,EAAoBC,OAApB,EAA6B;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC;AACA;AACA,UAAIW,GAAG,GAAG,CAAV;;AACA,UAAGZ,OAAO,CAACC,CAAD,CAAP,CAAWY,OAAX,KAAuB,QAA1B,EAAoC;AAChCP,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAK,QAAAA,GAAG,GAAG,CAAN;AACH,OAHD,MAGO,CACN;;AAAC,UAAIA,GAAG,KAAK,CAAZ,EAAe;AACb;AACH;AACJ;;AACDN,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;AAhDY,CAAjB","sourcesContent":["var Matriz = []\r\nvar Index = []\r\nvar MatrizAdy = []\r\nvar columnas = []\r\nmodule.exports = {\r\n    Matriz: function (Vertices, Aristas) {\r\n        Index = []\r\n        Matriz = []\r\n        for (let i = 0; i < Vertices.length; i++) {\r\n            Index += i.toString()\r\n        }\r\n        //console.log(Index)\r\n        Index = Index.split(\",\")\r\n        Index.pop()\r\n        console.log(`  | ${Index}`)\r\n        for (let i = 0; i < Vertices.length; i++) {\r\n            Matriz.push(Index)\r\n        }\r\n        this.mostrarMatriz(Vertices, Aristas)\r\n      },\r\n      \r\n    mostrarMatriz: function (Vertices, Aristas) {\r\n        columnas = []\r\n        for (let i = 0; i < Vertices.length; i++) {\r\n            columnas += `${0},`\r\n        }\r\n        columnas = columnas.split(\",\")\r\n        columnas.pop()\r\n        for (let i = 0; i < Vertices.length; i++) {\r\n            console.log(`${i} | ${columnas}`)\r\n        }\r\n        //alert(Index)\r\n      },\r\n\r\n    matrizAdyacencia: function (Vertices, Aristas) {\r\n\r\n    },\r\n\r\n    tipoGrafo: function (Vertices, Aristas) {\r\n        for (let i = 0; i < Aristas.length; i++) {\r\n            //console.log(`from ${Aristas[i].from} to ${Aristas[i].to}`)\r\n            //console.log((Aristas[i].sentido))\r\n            var aux = 0\r\n            if(Aristas[i].sentido !== 'Simple') {\r\n                console.log(\"Es dirigido\")\r\n                aux = 1\r\n            } else {\r\n            } if (aux === 1) {\r\n                return;\r\n            }\r\n        }\r\n        console.log(\"Es Simple\")\r\n    },\r\n}"]},"metadata":{},"sourceType":"module"}