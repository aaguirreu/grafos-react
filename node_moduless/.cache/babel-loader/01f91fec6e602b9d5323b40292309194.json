{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thesn\\\\OneDrive - utem.cl\\\\Escritorio\\\\Universidad\\\\6to Semestre\\\\Graphs\\\\grafos-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { createRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nconst App = () => {\n  _s();\n\n  const createNode = (x, y, selected) => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter + 1;\n      const from = parseInt(selected);\n      return {\n        graph: {\n          nodes: [...nodes, {\n            id: id,\n            label: `Node ${id}`,\n            color,\n            x,\n            y\n          }],\n          edges: [...edges, {\n            from: from,\n            to: id\n          }, {\n            from: id,\n            to: from\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const createEdge = (selected, selectedAux) => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n      selected = null;\n\n      for (let i of edges) {\n        if (i.from === from && i.to === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [...nodes],\n              edges: [...edges]\n            },\n            counter: id,\n            ...rest\n          };\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges, {\n            from: from,\n            to: to\n          }]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const infoEdges = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      for (let i of edges) {\n        if (i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i);\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  const infoNodes = selec => {\n    setState(({\n      graph: {\n        nodes,\n        edges\n      },\n      counter,\n      ...rest\n    }) => {\n      const id = counter;\n      const from = parseInt(selectedAux);\n      const to = parseInt(selected);\n\n      for (let n of nodes) {\n        if (n.id === parseInt(selec)) {\n          console.log(\"Selected node:\");\n          console.log(n);\n          console.log(\"Edges:\");\n\n          for (let e of edges) {\n            if (e.from === n.id || e.to === n.id) {\n              console.log(e);\n            }\n          }\n        }\n      }\n\n      return {\n        graph: {\n          nodes: [...nodes],\n          edges: [...edges]\n        },\n        counter: id,\n        ...rest\n      };\n    });\n  };\n\n  var tool;\n  var selected;\n  var selectedAux;\n  var selectedNode;\n  var selectedEdge;\n  var color = randomColor();\n  const [cursor, setCursor] = useState('crosshair');\n\n  const changeCursor = () => {\n    setCursor(prevState => {\n      if (prevState === 'crosshair') {\n        return 'pointer';\n      }\n\n      return 'crosshair';\n    });\n  };\n\n  const crearNode = document.querySelector('button[name=nodes]');\n  const crearEdge = document.querySelector('button[name=edges-one]');\n  const crearEdgeDoble = document.querySelector('button[name=edges-doble]');\n  crearNode.addEventListener(\"click\", e => {\n    document.querySelectorAll(\".tool\").forEach(function (x) {\n      x.setAttribute(\"class\", \"tool\");\n    });\n    crearNode.setAttribute(\"class\", \"tool on\");\n    console.log(\"Tool: nodes\");\n    tool = \"nodes\";\n    changeCursor();\n  });\n  crearEdge.addEventListener(\"click\", e => {\n    document.querySelectorAll(\".tool\").forEach(function (x) {\n      x.setAttribute(\"class\", \"tool\");\n    });\n    crearEdge.setAttribute(\"class\", \"tool on\");\n    console.log(\"Tool: edges-one\");\n    tool = \"edges-one\";\n  });\n  crearEdgeDoble.addEventListener(\"click\", e => {\n    document.querySelectorAll(\".tool\").forEach(function (x) {\n      x.setAttribute(\"class\", \"tool\");\n    });\n    crearEdgeDoble.setAttribute(\"class\", \"tool on\");\n    console.log(\"Tool: nodes-doble\");\n    tool = \"nodes\";\n  });\n  const [state, setState] = useState({\n    counter: 1,\n    graph: {\n      nodes: [{\n        id: 1,\n        label: `Node ${1}`,\n        color\n      }],\n      edges: []\n    },\n    events: {\n      selectNode: ({\n        nodes\n      }) => {\n        //console.log(\"Selected nodes:\");\n        //console.log(nodes);\n        //alert(\"Selected node: \" + nodes);\n        selectedNode = nodes;\n        selected = nodes;\n        infoNodes(nodes);\n        if (tool === \"edges-one\") createEdge(selectedNode, selectedAux);\n      },\n      selectEdge: ({\n        edges\n      }) => {\n        infoEdges(edges);\n      },\n      doubleClick: ({\n        pointer: {\n          canvas\n        }\n      }) => {\n        if (tool === \"nodes\") createNode(canvas.x, canvas.y, selectedNode);\n      },\n      hoverEdge: ({\n        pointer: {\n          canvas\n        }\n      }) => {//createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode: () => {\n        //console.log(\"Deselected node:\");\n        //console.log(selected);\n        selectedAux = selected;\n      },\n      deselectEdge: () => {\n        //console.log(\"Deselected edge:\");\n        //console.log(selected);\n        selectedAux = selected;\n      }\n    }\n  });\n  const {\n    graph,\n    events\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(Graph, {\n          graph: graph,\n          options: options,\n          events: events,\n          style: {\n            height: \"100vh\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"vs4kbuLe6UMxGeWkYpUKI7hOg4g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/thesn/OneDrive - utem.cl/Escritorio/Universidad/6to Semestre/Graphs/grafos-react/src/App.js"],"names":["Graph","React","createRef","useState","options","layout","hierarchical","edges","color","randomColor","red","Math","floor","random","toString","padStart","green","blue","App","createNode","x","y","selected","setState","graph","nodes","counter","rest","id","from","parseInt","label","to","createEdge","selectedAux","i","infoEdges","selec","console","log","infoNodes","n","e","tool","selectedNode","selectedEdge","cursor","setCursor","changeCursor","prevState","crearNode","document","querySelector","crearEdge","crearEdgeDoble","addEventListener","querySelectorAll","forEach","setAttribute","state","events","selectNode","selectEdge","doubleClick","pointer","canvas","hoverEdge","deselectNode","deselectEdge","height"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport React, { createRef, useState } from \"react\";\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nconst App = () => {\n  const createNode = (x, y, selected) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      const from = parseInt(selected)\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id: id, label: `Node ${id}`, color, x, y }\n          ],\n          edges: [\n            ...edges,\n            { from: from, to: id },\n            { from: id, to: from }\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  \n  const createEdge = (selected, selectedAux) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      selected = null\n      for(let i of edges) {\n        if(i.from === from && i.to === to) {\n          //console.log(`Ya existe ${i}`)\n          return {\n            graph: {\n              nodes: [\n                ...nodes,\n              ],\n              edges: [\n                ...edges,\n              ]\n            },\n            counter: id,\n            ...rest\n          }\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n            {from: from, to: to}\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const infoEdges = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      for(let i of edges) {\n        if(i.id === selec.toString()) {\n          console.log(\"Selected edges:\");\n          console.log(i)\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n\n  const infoNodes = (selec) => {\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter;\n      const from = parseInt(selectedAux)\n      const to = parseInt(selected)\n      for(let n of nodes) {\n        if(n.id === parseInt(selec)) {\n          console.log(\"Selected node:\");\n          console.log(n)\n          console.log(\"Edges:\");\n          for(let e of edges) {\n            if(e.from === n.id || e.to === n.id) {\n              console.log(e)\n            }\n          }\n        }\n      }\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n          ],\n          edges: [\n            ...edges,\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  \n  var tool\n  var selected\n  var selectedAux\n  var selectedNode\n  var selectedEdge\n  var color = randomColor()\n  const [cursor, setCursor] = useState('crosshair');\n\n  const changeCursor = () => {\n    setCursor(prevState => {\n      if(prevState === 'crosshair'){\n        return 'pointer';\n      }\n      return 'crosshair';\n    });\n  }\n\n  const crearNode = document.querySelector('button[name=nodes]')\n  const crearEdge = document.querySelector('button[name=edges-one]')\n  const crearEdgeDoble = document.querySelector('button[name=edges-doble]')\n\n  crearNode.addEventListener(\"click\", (e) => {\n    document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n    crearNode.setAttribute(\"class\",\"tool on\")\n    console.log(\"Tool: nodes\")\n    tool = \"nodes\"\n    changeCursor()\n  })\n\n  crearEdge.addEventListener(\"click\", (e) => {\n    document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n    crearEdge.setAttribute(\"class\",\"tool on\")\n    console.log(\"Tool: edges-one\")\n    tool = \"edges-one\"\n  })\n\n  crearEdgeDoble.addEventListener(\"click\", (e) => {\n    document.querySelectorAll(\".tool\").forEach((function(x){x.setAttribute(\"class\", \"tool\");}))\n    crearEdgeDoble.setAttribute(\"class\",\"tool on\")\n    console.log(\"Tool: nodes-doble\")\n    tool = \"nodes\"\n  })\n\n  const [state, setState] = useState({\n    counter: 1,\n    graph: {\n      nodes: [\n        { id: 1, label: `Node ${1}`, color }\n      ],\n      edges: [],\n    },\n    events: {\n      selectNode: ({ nodes }) => {\n        //console.log(\"Selected nodes:\");\n        //console.log(nodes);\n        //alert(\"Selected node: \" + nodes);\n        selectedNode = nodes\n        selected = nodes\n        infoNodes(nodes)\n        if(tool === \"edges-one\")\n        createEdge(selectedNode, selectedAux);\n      },\n      selectEdge: ({ edges }) => {\n        infoEdges(edges)\n      },\n      doubleClick: ({ pointer: { canvas } }) => {\n        if(tool === \"nodes\") \n        createNode(canvas.x, canvas.y, selectedNode);\n      },\n      hoverEdge: ({ pointer: { canvas } }) => {\n        //createEdge(canvas.x, canvas.y, selectedEdge);\n      },\n      deselectNode:  () => {\n        //console.log(\"Deselected node:\");\n        //console.log(selected);\n        selectedAux = selected\n      },\n      deselectEdge:  () => {\n        //console.log(\"Deselected edge:\");\n        //console.log(selected);\n        selectedAux = selected\n      }\n    }\n  })\n  const { graph, events } = state;\n  return (\n    <div>\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <Graph graph={graph} options={options} events={events} style={{ height: \"100vh\" }} />\n      </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}